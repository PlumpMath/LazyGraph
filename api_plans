These are some of the plans I have for how people will be able to use this

# Graph Creation
- There will be 2 ways to create Graphs
  - You can specify you're own node
    class, which will inherit from LazyGraph.baseNode. This will involve
    making sure yourself that the main methods that the processing
    algorithms use are implemented correctly.
    - The main one being edges() which returns a list of node 'id' strings
  - The other way to create a Node class is to use the LazyGraph.NodeBuilder
    metaclass, this makes graph creation much easier as the NodeBuilder does
    some tests on the functions you pass in to make sure they will create a
    valid node.
- Once you have a valid node class you can use the functions in LazyGraph.Compute
  to process it. I wish to build up a very large library of graph processing
  functions. This will include simple ones that only require the Node class to
  have edges() defined, as well as more complicated ones that may need more
  methods defined (heuristics) or let you pass in functions to modify their
  behavior. These functions will emphasise speed and accuracy.
- I would also like to add in many more complicated graph processing and
  implement some distributed graph processing algorithms. I would like to build
  these in a way that you can run it either on multiple cores or machines and
  especially one that runs on piclound and provisions more instances on the fly
  depending on the type of processing you are doing.